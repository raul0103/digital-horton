<?php

if ($_SERVER['REQUEST_METHOD'] !== 'POST') return;

$input = file_get_contents('php://input');
$data = json_decode($input, true);

if (empty($data['action']) || $data['action'] !== "fast-search") return;


/**
Поиск товаров и категорий.
Что умеет поиск?
1. Искать по артикулу.
2. Искать по отдельному слову.
3. Искать по габаритам, например: 600x200x50. Габариты можно переставлять местами. Подходят разделители: русская х, английская x, символ звездочка *.
4. Транслитеризация. Чтобы искать можно было по транслиту.
5. Поиск по значению опциий
6. Поиск СЕО-выборок (хотя на СтройМаркете их нет).

TODO: Что нужно добавить?
1. Строгий и НЕ строгий поиск (Через UNION. Или через SELECT, который выбирает из других SELECT, а у них уже есть дополнительный динамический столбец. Или через IF: If(name='name';1;10) as "PRIORITY").
 */


if (!class_exists('MLTSearch')) {
    class MLTSearch
    {

        protected array $synonyms = [
            "Манометры" => ["манометр", "датчик давления", "указатель давления"],
            "Термометры" => ["термометр", "измеритель температуры", "температурный датчик"],
            "Термометры общетехнические (осевое присоединение)" => ["термометр осевой", "осевой термометр", "техн. термометр осевой"],
            "Термометры общетехнические (радиальное присоединение)" => ["термометр радиальный", "радиальный термометр", "техн. термометр радиальный"],
            "Датчики" => ["сенсор", "датчик", "измерительный элемент"],
            "Преобразователи давления" => ["датчик давления", "преобразователь", "датчик перепада"],
            "Датчики давления" => ["датчик давления", "манометрический датчик", "преобразователь давления"],
            "Датчики скорости воздуха" => ["анемометр", "датчик воздушного потока", "датчик скорости потока"],
            "Стальные подставки" => ["подставка стальная", "опора стальная", "стойка металлическая"],

            // Группировка по типам подставок
            "Подставки ППС" => ["подставка ППС", "стойка ППС"],
            "Подставки ППФО" => ["подставка ППФО", "стойка ППФО"],
            "Подставки ППФ" => ["подставка ППФ", "стойка ППФ"],
            "Подставки ППТФ" => ["подставка ППТФ", "стойка ППТФ"],
            "Подставки ППКФ" => ["подставка ППКФ", "стойка ППКФ"],
            "Чугунные подставки" => ["подставка чугунная", "стойка чугунная"],
            "Подставки ППФ чугунные" => ["подставка ППФ чугун", "стойка ППФ чугун"],
            "Подставки ППТФ чугунные" => ["подставка ППТФ чугун", "стойка ППТФ чугун"],
            "Подставки ППТРФ" => ["подставка ППТРФ", "стойка ППТРФ"],
            "Подставки ППКРФ" => ["подставка ППКРФ", "стойка ППКРФ"],
            "Подставки ППР" => ["подставка ППР", "стойка ППР"],
            "Подставки ППКФ чугунные" => ["подставка ППКФ чугун", "стойка ППКФ чугун"],

            // Гидранты
            "Гидранты" => ["пожарный гидрант", "гидрант"],
            "Гидранты подземные" => ["гидрант подземный", "скрытый гидрант"],
            "Гидранты надземные" => ["гидрант надземный", "наружный гидрант"],

            // Оросители
            "Оросители" => ["спринклер", "орошатель", "оросительная головка"],
            "Оросители водяные" => ["спринклер водяной", "ороситель водяной"],
            "Оросители СВВ" => ["ороситель СВВ", "спринклер СВВ"],
            "Оросители СВН" => ["ороситель СВН", "спринклер СВН"],
            "Оросители пенные" => ["пенный ороситель", "спринклер пены"],

            // Клапаны
            "Клапаны" => ["клапан", "запорное устройство", "регулирующий клапан"],
            "Клапаны дыхательные" => ["дыхательный клапан", "клапан ДК", "клапан давления"],
            "Клапаны механические дыхательные КДМ-200К" => ["КДМ-200К", "клапан КДМ-200К"],
            "Клапаны механические дыхательные КДМ-150К" => ["КДМ-150К", "клапан КДМ-150К"],
            "Клапаны механические дыхательные КДМ-200" => ["КДМ-200", "клапан КДМ-200"],
            "Клапаны дыхательные КДС-1500K" => ["КДС-1500K", "клапан КДС-1500K"],
            "Клапаны дыхательные КДС-3000К" => ["КДС-3000К", "клапан КДС-3000К"],
            "Клапаны дыхательные КДС-3000" => ["КДС-3000", "клапан КДС-3000"],
            "Клапаны дыхательные КДС-1500" => ["КДС-1500", "клапан КДС-1500"],

            // Клапаны предохранительные
            "Клапаны предохранительные" => ["предохранительный клапан", "ПГК", "клапан сброса давления"],
            "Клапаны предохранительные КПГ-К" => ["КПГ-К", "предохранительный клапан КПГ-К"],
            "Клапаны предохранительные КПГ" => ["КПГ", "предохранительный клапан КПГ"],

            // Хлопушки
            "Хлопушки" => ["пламегаситель", "хлопушка"],
            "Хлопушки ХП" => ["хлопушка ХП", "ХП"],
            "Хлопушки электроприводные ЭХ-700" => ["ЭХ-700", "электрохлопушка", "хлопушка ЭХ-700"],
            "Механизм управления хлопушкой верхние МУВ" => ["МУВ", "управляющий механизм МУВ"],

            // Люки
            "Люки" => ["люк", "крышка", "технический люк"],
            "Люки замерные" => ["замерный люк", "люк ЗЛ"],
            "Люки световые" => ["световой люк", "люк освещения"],
            "Люк лаз ЛЛ" => ["люк ЛЛ", "лазовой люк"],

            // Мостики
            "Мостики" => ["технический мостик", "переходная платформа", "монтажный мостик"],

            // Колодцы
            "Железобетонные колодцы" => ["ж/б колодец", "бетонный колодец", "колодец из ж/б"],
            "Колодцы ВГ" => ["колодец ВГ", "водогазовый колодец"],
            "Колодцы сетей связи" => ["связной колодец", "колодец связи"],
            "Колодцы ККС" => ["ККС", "колодец ККС"],
            "Колодцы ККСС" => ["ККСС", "колодец ККСС"],
            "Колодцы ККСр" => ["ККСр", "колодец ККСр"],

            // Железобетонные изделия
            "Железобетонные плиты" => ["ЖБ плита", "бетонная плита", "плита"],
            "Плиты днища" => ["днищевые плиты", "плита основания"],
            "Плиты перекрытия" => ["перекрытие", "плита перекрытия"],
            "Дорожные плиты" => ["плита дорожная", "дорожка из плит", "плита ПД"],
            "Железобетонные кольца" => ["ж/б кольца", "бетонные кольца", "кольца"],
            "Кольца КС" => ["кольцо КС", "КС"],
            "Кольца КЦ" => ["кольцо КЦ", "КЦ"],

            // Светильники
            "Светильники уличные" => ["уличный светильник", "наружный светильник"],
            "Светильник «Модуль СТ», консоль К-1" => ["Модуль СТ К-1", "светильник К-1"],
            "Светильник «Модуль СТ», консоль МК-2" => ["Модуль СТ МК-2", "светильник МК-2"],
            "Светильник «Модуль СТ», консоль МК-3, 96 Вт" => ["Модуль СТ МК-3", "светильник 96Вт", "светильник МК-3"],
            "Светильник «Модуль СТ», консоль К-2" => ["Модуль СТ К-2", "светильник К-2"],
            "Светильники промышленные" => ["промсвет", "цеховой светильник", "промышленный светильник"],
            "Светильник «Модуль СТ», универсальный У-1" => ["Модуль СТ У-1", "светильник У-1"],
            "Светильник «Модуль СТ», универсальный У-2" => ["Модуль СТ У-2", "светильник У-2"],

            // Освещение
            "Опоры освещения" => ["опора светильника", "мачта освещения", "столб освещения"],

            // Трубы и водоснабжение
            "Полимерные трубы" => ["пластиковые трубы", "трубы ПЭ", "трубы из полимера"],
            "Водоснабжение" => ["система водоснабжения", "подача воды"],
            "Водопроводные трубы" => ["трубы водопровода", "трубы для воды"],
            "ПЭ 100 SDR 17" => ["труба ПЭ100 SDR17", "SDR17"],
            "ПЭ 100 SDR 13,6" => ["труба ПЭ100 SDR13.6", "SDR13.6"],
            "ПЭ 100 SDR 11" => ["труба ПЭ100 SDR11", "SDR11"],
            "ПЭ 100 SDR 9" => ["труба ПЭ100 SDR9", "SDR9"],
            "ПЭ 100 RC SDR 17" => ["труба ПЭ100RC SDR17", "SDR17 RC"],
            "ПЭ 100 RC SDR 11" => ["труба ПЭ100RC SDR11", "SDR11 RC"],
            "ПЭ 100 RC SDR 9" => ["труба ПЭ100RC SDR9", "SDR9 RC"],

            // Многослойные трубы
            "Многослойные серии Мультиклин" => ["Мультиклин", "многослойные трубы Мультиклин"],
            "Многослойные серии Мультипайп" => ["Мультипайп", "многослойные трубы Мультипайп"],
            "Трубы с защитной оболочкой серии Протект" => ["Протект", "трубы в оболочке"],

            // Напорные трубы
            "Трубы НПВХ" => ["трубы из НПВХ", "жесткий ПВХ"],
            "Системы напорных трубопроводов под уплотнительное кольцо" => ["трубы с резиновым кольцом", "на уплотнительное кольцо"],
            "Системы напорных трубопроводов клеевого типа" => ["клеевые трубы", "трубы на клею"],

            // Скважинные системы
            "Трубы PE-RT II" => ["PE-RT II", "трубы для отопления", "теплый пол трубы"],
            "Обсадные ПВХ трубы для скважин" => ["обсадные трубы", "ПВХ скважинные трубы"],
            "Щелевые ПВХ фильтры для скважин" => ["щелевые фильтры", "фильтрующие трубы ПВХ"],
            "Оголовки скважинные" => ["оголовок скважины", "оголовок ПВХ"],

            // Резервуары
            "Вертикальные накопительные резервуары" => ["вертикальный бак", "накопительный вертикальный резервуар"],
            "Горизонтальные накопительные резервуары" => ["горизонтальный бак", "накопительный горизонтальный резервуар"],
            "Прямоугольные накопительные резервуары" => ["прямоугольный бак", "накопительный резервуар прямоугольный"],

            // Резервуары и колодцы
            "Подземные накопительные резервуары" => ["подземный бак", "подземный резервуар", "емкость подземная"],
            "Колодцы для напорных систем" => ["напорные колодцы", "колодцы давления"],

            // Газоснабжение
            "Газораспределение" => ["газовые сети", "распределение газа"],
            "Газовые трубы" => ["трубы для газа", "газопроводные трубы"],
            "Двуслойные трубы серии Мультипайп (газ)" => ["Мультипайп газ", "двуслойные газовые трубы"],
            "Многослойные трубы серии Протект (газ)" => ["Протект газ", "многослойные трубы для газа"],
            "Фитинги для газопроводов" => ["газовые фитинги", "фитинг газопровода"],

            // Водоотведение / канализация
            "Водоотведение" => ["система водоотведения", "канализация наружная"],
            "Трубы PRAGMA" => ["трубы Прагма", "Прагма", "гофрированные трубы PRAGMA"],
            "Трубы Спиролайн" => ["Спиролайн", "спиральные трубы"],
            "Перепадные пластиковые колодцы" => ["перепадные колодцы", "колодцы перепада"],
            "Канализационные пластиковые колодцы" => ["канализационные колодцы", "пластиковые канализационные колодцы"],
            "Дождеприемные (ливневые) пластиковые колодцы" => ["ливневые колодцы", "дождеприемники", "дождеприемные колодцы"],
            "Наружная канализация трубы НПВХ" => ["наружная канализация", "НПВХ наружные трубы"],
            "Внутренняя канализация трубы НПВХ" => ["внутренняя канализация", "НПВХ внутренние трубы"],

            // Септики
            "Септики" => ["система очистки", "септик"],
            "Септики однокамерные" => ["однокамерный септик", "септик 1 камера"],
            "Септики двухкамерные" => ["двухкамерный септик", "септик 2 камеры"],
            "Септики трехкамерные" => ["трехкамерный септик", "септик 3 камеры"],

            // Кабелезащита
            "Кабелезащита" => ["защита кабеля", "трубы для кабеля"],
            "Трубы для кабеля гофрированные" => ["гофра для кабеля", "гофрированные кабельные трубы"],
            "Трубы ЭлектроПайп" => ["ElectroPipe", "Электро Пайп"],
            "Трубы ЭлектроПласт" => ["ElectroPlast", "Электро Пласт"],
            "Трубы ЗПТ" => ["трубы ZPT", "ЗПТ"],
            "Пластиковые кабельные колодцы" => ["кабельные колодцы", "пластиковые колодцы для кабеля"],

            // Фитинги
            "Фитинги" => ["соединительные элементы", "муфты", "уголки", "отводы"],
            "Электросварные фитинги" => ["электросварка", "электросварные муфты"],
            "Компрессионные фитинги" => ["компрессионные муфты", "фитинг с зажимом"],
            "Литые фитинги" => ["литые муфты", "цельные фитинги"],
            "Фитинги PE-RT II" => ["PE-RT фитинги", "фитинги для PE-RT II"],
            "НПВХ фитинги систем напорных трубопроводов" => ["НПВХ фитинги", "напорные фитинги из НПВХ"],

            // Аксессуары
            "Держатель расстояния (кластер) для двустенных труб" => ["кластер держатель", "фиксатор труб", "держатель труб двустенных"],
            // Фитинги PRAGMA и НПВХ наружные
            "Фитинги PRAGMA" => ["фитинг Прагма", "соединения PRAGMA"],
            "Наружная канализация фитинги НПВХ" => ["наружные НПВХ фитинги", "фитинги для наружной НПВХ канализации"],
            "ОТВОД НПВХ для наружных систем канализации" => ["наружный отвод НПВХ", "угол наружной канализации"],
            "ТРОЙНИК НПВХ для наружных систем канализации" => ["наружный тройник НПВХ", "тройник канализационный наружный"],
            "МУФТА НПВХ для наружных систем канализации" => ["наружная муфта НПВХ", "соединительная муфта НПВХ"],
            "КРЕСТОВИНА НПВХ для наружных систем канализации" => ["крест наружной канализации", "НПВХ крестовина наружная"],

            // Фитинги НПВХ внутренние
            "Внутренняя канализация фитинги НПВХ" => ["фитинги для внутренней канализации", "НПВХ фитинги внутренняя"],
            "ОТВОД НПВХ внутренней канализации" => ["внутренний отвод НПВХ", "угол внутренней канализации"],
            "ТРОЙНИК НПВХ внутренней канализации" => ["внутренний тройник НПВХ", "тройник канализации внутренний"],
            "КРЕСТОВИНА НПВХ внутренней канализации" => ["крестовина внутренняя НПВХ", "внутренний крест канализации"],
            "МУФТА НПВХ внутренней канализации" => ["муфта внутренняя НПВХ", "соединение НПВХ внутреннее"],

            // Фитинги кабельных труб
            "Фитинги ЭлектроПайп" => ["фитинги ElectroPipe", "соединители ЭлектроПайп"],
            "Фитинги ЭлектроПласт" => ["фитинги ElectroPlast", "соединители ЭлектроПласт"],

            // Арматура
            "Запорная арматура" => ["арматура запорная", "запорные устройства"],
            "Запорно-регулирующая арматура" => ["арматура регулирующая", "запорная регулируемая арматура"],
            "Клапаны обратные" => ["обратные клапаны", "обратный клапан"],
            "Клапаны предохранительные" => ["предохранительный клапан", "клапан защиты давления"],
            "Регуляторы давления" => ["редукторы давления", "регулятор давления воды"],
            "Задвижки чугунные" => ["чугунные задвижки", "задвижка из чугуна"],

            // Бренды арматуры
            "ABRA" => ["Арматура ABRA", "задвижки ABRA", "затворы ABRA"],
            "Dendor" => ["Арматура Dendor", "задвижки Dendor", "затворы Dendor"],
            "СибЗТА" => ["Сибирская ЗТА", "арматура СибЗТА"],
            "AVK" => ["арматура AVK", "задвижки AVK"],
            "МЗТА" => ["арматура МЗТА", "Московская ЗТА"],

            // Стальные задвижки
            "Задвижки стальные" => ["задвижка стальная", "стальные арматуры"],
            "Стальные задвижки СибЗТА" => ["СибЗТА стальные задвижки", "задвижки СибЗТА из стали"],

            // Затворы
            "Затворы" => ["дисковые затворы", "затворы поворотные", "запорные затворы"],

            // Фланцевые затворы
            "Фланцевые" => ["фланцевые затворы", "затвор с фланцем"],
            "Фланцевые ABRA" => ["фланцевый затвор ABRA", "затвор ABRA фланцевый"],
            "Фланцевые Dendor" => ["фланцевый затвор Dendor", "затвор Dendor фланцевый"],
            "Фланцевые AVK" => ["фланцевый затвор AVK", "затвор AVK фланцевый"],

            // Межфланцевые затворы
            "Межфланцевые" => ["межфланцевые затворы", "затвор межфланцевый"],
            "Межфланцевые ABRA" => ["затвор ABRA межфланцевый", "межфланцевый ABRA"],
            "Межфланцевые Dendor" => ["затвор Dendor межфланцевый", "межфланцевый Dendor"],
            "Межфланцевые AVK" => ["затвор AVK межфланцевый", "межфланцевый AVK"],

            // Шаровые краны
            "Шаровые краны" => ["шаровой кран", "краны шаровые"],

            // Газовые шаровые краны
            "Для газа" => ["шаровые краны для газа", "газовые краны"],
            "Temper газ фланцевые" => ["шаровые краны Temper фланцевые газ", "Temper фланцевый газовый кран"],
            "LD газ приварные" => ["шаровые краны LD приварные газ", "LD приварной газовый кран"],
            "LD газ фланцевые" => ["шаровые краны LD фланцевые газ", "LD фланцевый газовый кран"],
            "БАЗ латунные газ" => ["газовые краны БАЗ латунные", "латунный газовый кран БАЗ"],

            // Водяные шаровые краны
            "Для воды" => ["шаровые краны для воды", "водяные краны"],
            "Temper вода приварные" => ["шаровые краны Temper приварные вода", "Temper приварной водяной кран"],
            "Temper вода фланцевые" => ["шаровые краны Temper фланцевые вода", "Temper фланцевый водяной кран"],
            "LD вода приварные" => ["шаровые краны LD приварные вода", "LD приварной водяной кран"],
            "LD вода фланцевые" => ["шаровые краны LD фланцевые вода", "LD фланцевый водяной кран"],
            "БАЗ латунные вода" => ["водяные краны БАЗ латунные", "латунный водяной кран БАЗ"],

            // Детали трубопроводов
            "Стальные и чугунные детали трубопроводов" => ["детали трубопроводов", "трубопроводная арматура сталь чугун"],

            // Чугунные детали
            "Чугунные детали" => ["детали из чугуна", "чугунная арматура"],
            "Фланцы чугунные" => ["чугунный фланец", "фланец из чугуна"],
            "Тройники чугунные" => ["чугунный тройник", "тройник из чугуна"],
            "Отводы чугунные" => ["чугунный отвод", "отвод из чугуна"],

            // Стальные детали
            "Стальные детали" => ["детали из стали", "стальная арматура"],
            "Фланцы стальные" => ["стальной фланец", "фланец из стали"],
            "Тройники стальные" => ["стальной тройник", "тройник из стали"],
            "Отводы стальные" => ["стальной отвод", "отвод из стали"],
            "Переходы стальные" => ["стальной переход", "переход из стали"],

            // Оборудование для нефтебаз
            "Оборудование для нефтебаз" => ["нефтебаза оборудование", "нефтебаза комплектующие"],

            // Клапаны (общие)
            "Клапаны" => ["клапан", "запорный клапан"],

            // Дыхательные клапаны
            "Клапаны дыхательные" => ["дыхательные клапаны", "дыхательный клапан"],
            "Клапан механический дыхательный КДМ-200К" => ["КДМ-200К", "дыхательный клапан КДМ-200К"],
            "Клапан механический дыхательный КДМ-150К" => ["КДМ-150К", "дыхательный клапан КДМ-150К"],
            "Клапан механический дыхательный КДМ-200" => ["КДМ-200", "дыхательный клапан КДМ-200"],
            "Клапан дыхательный КДС-1500K" => ["КДС-1500К", "дыхательный клапан КДС-1500К"],
            "Клапан дыхательный КДС-3000К" => ["КДС-3000К", "дыхательный клапан КДС-3000К"],
            "Клапан дыхательный КДС-3000" => ["КДС-3000", "дыхательный клапан КДС-3000"],
            "Клапан дыхательный КДС-1500" => ["КДС-1500", "дыхательный клапан КДС-1500"],

            // Предохранительные клапаны
            "Клапаны предохранительные" => ["предохранительные клапаны", "предохранительный клапан"],
            "Клапан предохранительный КПГ-К" => ["КПГ-К", "предохранительный клапан КПГ-К"],
            "Клапан предохранительный КПГ" => ["КПГ", "предохранительный клапан КПГ"],

            // Хлопушки и механизмы
            "Хлопушки" => ["хлопушка", "устройство хлопушка"],
            "Хлопушки ХП" => ["хлопушка ХП", "ХП хлопушка"],
            "Механизм управления хлопушкой верхний МУВ" => ["МУВ", "механизм управления хлопушкой верхний", "управление хлопушкой МУВ"],
            "Хлопушка электроприводная ЭХ-700" => ["ЭХ-700", "электроприводная хлопушка ЭХ-700", "хлопушка ЭХ-700"],

            // Люки и дождеприемники
            "Люки нефтебаз" => ["люк нефтебазы", "нефтебазовый люк"],
            "Люки замерные" => ["замерный люк", "люк для замеров"],
            "Люки световые" => ["световой люк", "люк со светом"],
            "Люк лаз ЛЛ" => ["лаз люк ЛЛ", "ЛЛ люк лаз"],
            "Мостики" => ["мостик", "технический мостик"],
            "Люки и дождеприемники" => ["люки и ливневые приемники", "дождеприемники и люки"],

            "Люки" => ["люк"],
            "Люки чугунные" => ["чугунный люк", "люк из чугуна"],
            "Люки полимерные" => ["полимерный люк", "люк из полимера"],

            "Дождеприемники" => ["дождеприемник", "ливневый приемник"],
            "Дождеприемники чугунные" => ["чугунный дождеприемник", "дождеприемник из чугуна"],
            "Дождеприемники полимерные" => ["полимерный дождеприемник", "дождеприемник из полимера"],

            // Стальные и чугунные системы трубопроводов
            "Стальные и чугунные системы трубопроводов" => ["системы трубопроводов стальные и чугунные", "трубопроводные системы сталь чугун"],
            "Трубы стальные" => ["стальная труба", "труба из стали"],
            "Трубы чугунные" => ["чугунная труба", "труба из чугуна"],
            "Фасонные части" => ["фасонные элементы", "фасонные детали трубопроводов"],

            // Кабель и провод
            "Кабель и провод" => ["кабели и провода", "электрокабель и провод"],
            "Кабели связи" => ["связь кабели", "кабель для связи"],
            "Провода установочные" => ["установочный провод", "провод для установки"],
            "Кабели силовые" => ["силовой кабель", "кабели для силовых цепей"],

            // Силовые кабели по маркам
            "Кабель силовой ВБШв" => ["силовой кабель ВБШв", "ВБШв кабель"],
            "Кабель силовой ВБШвнг" => ["силовой кабель ВБШвнг", "ВБШвнг кабель"],
            "Кабель силовой ПвВГнг(A)" => ["силовой кабель ПвВГнг(A)", "ПвВГнг(A) кабель"],
            "Кабель силовой ПвВГнг(A)-FRLS" => ["силовой кабель ПвВГнг(A)-FRLS", "ПвВГнг(A)-FRLS кабель"],
            "Кабель силовой ПвВнг(A)-LS" => ["силовой кабель ПвВнг(A)-LS", "ПвВнг(A)-LS кабель"],
            "Кабель силовой ПвБВ" => ["силовой кабель ПвБВ", "ПвБВ кабель"],
            "Кабель силовой ПвПуг" => ["силовой кабель ПвПуг", "ПвПуг кабель"],
            "Кабель силовой АПвПу" => ["силовой кабель АПвПу", "АПвПу кабель"],
            "Кабель силовой АВВГ" => ["силовой кабель АВВГ", "АВВГ кабель"],
            "Кабель силовой АВВГнг" => ["силовой кабель АВВГнг", "АВВГнг кабель"],
            "Кабель силовой АВВГнг-LS" => ["силовой кабель АВВГнг-LS", "АВВГнг-LS кабель"],

            // Трубы ПЭ 100 (газ)
            "Трубы ПЭ 100 SDR 11 (газ)" => ["трубы ПЭ 100 SDR 11 газ", "PE 100 SDR 11 газ"],
            "Трубы ПЭ 100 SDR 17,6 (газ)" => ["трубы ПЭ 100 SDR 17,6 газ", "PE 100 SDR 17,6 газ"],
        ];

        // Служебные константы

        // Лимиты для AJAX-поиска
        const LIMIT_CATEGORIES = 16; // Макс. кол-во категорий при AJAX поиске
        const LIMIT_PRODUCTS = 10; // Макс. кол-во товаров при AJAX поиске (их меньше, чем категорий, т.к. у них картинка, которая занимает высоту)

        const SEO_TEMPLATES = ""; // ID шаблонов по сео выборкам 

        // Поля класса
        protected $requestType; // Тип запроса: ajax / не ajax
        protected $queryPhrase; // Фраза для поиска

        protected $tplProduct; // Чанк для товара при AJAX поиске
        protected $tplCategory; // Чанк для категории при AJAX поиске
        protected $tplWrapper; // Чанк-обертка при AKAX поиске

        /**
         * MLTSearch constructor.
         * @param $tplProduct
         * @param $tplCategory
         * @param $tplWrapper

         */
        public function __construct($tplProduct, $tplCategory, $tplWrapper, $query)
        {
            $this->tplProduct = $tplProduct;
            $this->tplCategory = $tplCategory;
            $this->tplWrapper = $tplWrapper;

            $query_preg = preg_replace('/[^\p{L}\p{N}.,]+/u', ' ', $query); // Удаляем все символы, кроме цифр и букв
            $query_preg = preg_replace('/\s+/', ' ', $query_preg); // Удаляем двойные пробелы
            $this->queryPhrase = trim($query_preg);
        }


        /**
         * Главная открытая функция класса.
         * @return bool
         */
        public function run()
        {
            global $modx;





            $where = $this->generateWhere("`resources`.`pagetitle`");
            // exit(json_encode($where, JSON_UNESCAPED_UNICODE));
            $categoryValues = [];
            $productsValues = [];

            /**
             *  1 
             * Получаем СЕО выборки
             */
            $seoData = $this->findSeo($where['wherePagetitle'], $where['queryWordsArray']);
            foreach ($seoData as $itemIndex => $itemValues) {
                if (count($categoryValues) < self::LIMIT_CATEGORIES) {
                    $item_id = $itemValues['id'];
                    $categoryValues[$item_id]['id'] = $itemValues['id'];
                    $categoryValues[$item_id]['pagetitle'] = $itemValues['pagetitle'];
                    $categoryValues[$item_id]['menutitle'] = $itemValues['menutitle'];
                }
            }

            /**
             *  2
             * Получаем товары по pagetitle
             */
            $products = $this->findProducts($where['main'], $where['queryWordsArray']);
            // Если товаров меньше лимита, тут же находим товары по опциям
            if (count($products) < self::LIMIT_PRODUCTS) {
                $where_options = $this->generateWhere("`msOption`.`value`");
                $search_options = true;
                $products = array_merge($products, $this->findProducts($where_options['main'], $where_options['queryWordsArray'], $search_options));
            }



            foreach ($products as $itemIndex => $itemValues) {
                if (count($categoryValues) < self::LIMIT_CATEGORIES) {
                    $parent_id = $itemValues['parent_id'];
                    $categoryValues[$parent_id]['id'] = $itemValues['parent_id'];
                    $categoryValues[$parent_id]['pagetitle'] = $itemValues['parent_pagetitle'];
                    $categoryValues[$parent_id]['menutitle'] = $itemValues['parent_menutitle'];
                }
                if (count($productsValues) < self::LIMIT_PRODUCTS) {
                    $productsValues[$itemIndex]['id'] = $itemValues['id'];
                    $productsValues[$itemIndex]['pagetitle'] = $itemValues['pagetitle'];
                    $productsValues[$itemIndex]['menutitle'] = $itemValues['menutitle'];
                    $productsValues[$itemIndex]['thumb'] = $itemValues['thumb'];
                }
            }

            /** 
             * 3
             * Если кол-во категорий меньше, находим их отделным запросом
             */
            if (count($categoryValues) < self::LIMIT_CATEGORIES) {
                $categories = $this->findCategories($where['wherePagetitle'], $where['queryWordsArray'], false);

                foreach ($categories as $itemIndex => $itemValues) {
                    if (count($categoryValues) < self::LIMIT_CATEGORIES) {
                        $item_id = $itemValues['id'];
                        $categoryValues[$item_id]['id'] = $itemValues['id'];
                        $categoryValues[$item_id]['pagetitle'] = $itemValues['pagetitle'];
                        $categoryValues[$item_id]['menutitle'] = $itemValues['menutitle'];
                    }
                }
            }


            /** 
             * 4
             * Формируем результат
             */
            $output = [];

            // Подготавливаем товары для вывода
            if (count($productsValues)) {
                $products = $this->wrapDataToChunk($productsValues, $this->tplProduct);
                $output['products'] = $products;
            }

            // Подготавливаем категории для вывода
            if (count($categoryValues)) {
                $categories = $this->wrapDataToChunk($categoryValues, $this->tplCategory);
                $output['categories'] = $categories;
            }

            if (count($output)) {
                // Обертываем данные в чанк
                $output = $modx->pdoTools->getChunk($this->tplWrapper, $output);
                return $this->returnData($output);
            } else {
                return $this->returnData(null);
            }
        }

        protected function getSynonyms(string $word): array
        {
            $result = [];
            foreach ($this->synonyms as $key => $values) {
                foreach ($values as $value) {
                    if (strlen($word > 3 && strpos($value, $word) !== false)) {
                        $result[] = $key;
                        $result = array_merge($result, $values);
                    }
                }

                // if (stripos($key, $word) !== false || in_array($word, $values, true)) {
                //     $result[] = $key;
                //     $result = array_merge($result, $values);
                // }
            }


            return array_unique($result);
        }


        /**
         * Генерирует where для sql 
         * 
         * @param $tableField
         */
        public function generateWhere($tableField)
        {
            // Объявляем нужные для работы переменные
            $wherePagetitle = [];
            $queryWordsArray = []; // Массив с плейсхолдерами для SQL-запроса
            $index = 0;

            // Цикл для каждого слова в поиске
            foreach (explode(' ', $this->queryPhrase) as $queryWord) {
                // Слово содержит запятую / точку
                if (stristr($queryWord, ',') || stristr($queryWord, '.')) {
                    $queryWord = preg_replace('/[, .]/', '[,\.]', $queryWord);
                    $wherePagetitle[] = "$tableField REGEXP :queryWord$index";

                    $queryWordsArray['queryWord' . $index] = $queryWord;
                    $index++;
                }

                // Слово - это габариты, которые можно переставлять местами
                else if (preg_match('/(^|\s)([0-9]+[xх*]{1}[0-9]+([xх*][0-9]+)?)($|\s)/iu', $queryWord, $match)) {
                    // Получаем габариты
                    $dimensions = $match[2];
                    // Составляем перебор
                    $dimensionsEnum = $this->getDimensionsEnum($dimensions);

                    // Заполняем массивы для SQL-запроса
                    $wherePagetitleOR = [];
                    foreach ($dimensionsEnum as $val) {
                        // Я использовал круглые скобки вместо квадратных, т.к. у нас в основном MySQL 5.7. Данная версия не поддерживает кириллицу в квадратных скобках
                        $val = str_replace('x', '(х|Х|x|X|\\\\*)', $val);
                        $wherePagetitleOR[] = "$tableField REGEXP :queryWord$index";

                        $queryWordsArray['queryWord' . $index] = $val;
                        $index++;
                    }

                    $wherePagetitle[] = '(' . implode(' OR ', $wherePagetitleOR) . ')';
                }

                // Обычная обработка слова
                else {
                    // Получить синонимы слова
                    $synonyms = $this->getSynonyms($queryWord);
                    $likeParts = [];

                    // exit(json_encode($synonyms, JSON_UNESCAPED_UNICODE));

                    foreach ($synonyms ?: [$queryWord] as $synonym) {
                        $likeParts[] = "($tableField LIKE :ru_queryWord$index OR $tableField LIKE :en_queryWord$index)";
                        $queryWordsArray['ru_queryWord' . $index] = '%' . $this->translit($synonym, 'en_ru') . '%';
                        $queryWordsArray['en_queryWord' . $index] = '%' . $this->translit($synonym, 'ru_en') . '%';
                        $index++;
                    }

                    $wherePagetitle[] = '(' . implode(' OR ', $likeParts) . ')';
                }
            }

            // Подготавливаем переменные для составления SQL-запроса
            $queryWordsArray['queryPhrase'] = '%' . $this->queryPhrase . '%';
            $wherePagetitle = '(' . implode(' AND ', $wherePagetitle) . ')';
            $where = $wherePagetitle . ' OR (`Data`.`article` LIKE :queryPhrase)';

            return [
                'main' => $where,
                'queryWordsArray' => $queryWordsArray,
                'wherePagetitle' => $wherePagetitle
            ];
        }

        /**
         * Возвращает данные.
         */
        protected function returnData($data)
        {
            die($data);
        }


        /**
         * Подготавливает данные для занесения в чанк.
         */
        protected function wrapDataToChunk($data, $chunk)
        {
            global $modx;
            $result = '';

            foreach ($data as $val) {
                $menutitle = $val['menutitle'] ?: $val['pagetitle'];
                $uri = $modx->pdoTools->makeUrl($val['id']);
                $image = $val['thumb'] ?: '';

                $result .= $modx->pdoTools->getChunk($chunk, [
                    'menutitle' => $menutitle,
                    'uri' => $uri,
                    'image' => $image
                ]);
            }

            return $result;
        }


        /**
         * Составляет перебор всех возможных значений по габаритам. Это массив всех возможных значений.
         * @param $dimensions
         * @return array
         */
        private function getDimensionsEnum($dimensions)
        {
            // Разбиваем габариты на отдельные числа
            $dimensions = preg_split('/[xх*]/iu', $dimensions);

            // Устанавливаем нужные для циклов переменные
            $count = count($dimensions); // кол-во
            for ($i = 0; $i < $count - 1; $i++) { // index'ы
                $indexes[$i + 1] = 0;
            }

            // Составляем $dimensionsEnum. Это перебор всех возможных значений
            $dimensionsEnum = [];
            for ($index1 = 0; $index1 < $count; $index1++) {
                for ($k = 0; $k < $count - 1; $k++) {
                    $dimensionsEnum[$i . $index1 . $k] = $dimensions[$index1];

                    foreach ($indexes as $indexKey => $indexVal) {
                        $indexVal = ($index1 + $k + $indexKey) % $count;
                        if ($indexVal == $index1) {
                            if ($count > 2) {
                                $indexVal = ($indexVal + 1) % $count;
                            } else {
                                continue;
                            }
                        }

                        $dimensionsEnum[$i . $index1 . $k] .= 'x' . $dimensions[$indexVal];
                    }
                }
            }

            if ($count == 2) {
                foreach ($dimensionsEnum as $dim) {
                    $dimensionsEnum[] = preg_replace('/([xх*])/iu', '$1[0-9]+$1', $dim);
                }
            }
            return $dimensionsEnum;
        }


        /**
         * Выборка товаров и их родителей (категорий)
         * @param $where
         * @param $queryWordsArray
         * @return Array
         */
        private function findProducts($where, $queryWordsArray, $search_options = false)
        {
            global $modx;

            // SQL для поиска товаров (и их категорий)
            $query = "SELECT `resources`.`id`";

            $query .= ", `resources`.`menutitle`, `resources`.`pagetitle`, `Data`.`thumb`, `Parent`.`id` AS parent_id, `Parent`.`pagetitle` AS parent_pagetitle, `Parent`.`menutitle` AS parent_menutitle ";

            $query .= " FROM `modx_site_content` AS `resources` 
              LEFT JOIN `modx_ms2_products` `Data` ON `resources`.`id` =  `Data`.`id` 
              LEFT JOIN `modx_site_tmplvar_contentvalues` `TVhitspage` ON `TVhitspage`.`contentid` = `resources`.`id` AND `TVhitspage`.`tmplvarid` = 7 
              LEFT JOIN `modx_site_tmplvar_contentvalues` `TVpriority1` ON `TVpriority1`.`contentid` = `resources`.`id` AND `TVpriority1`.`tmplvarid` = 17";

            if ($search_options) {
                $query .= " LEFT JOIN `modx_ms2_product_options` `msOption` ON `msOption`.`product_id` = `resources`.`id`";
            }

            $query .= " LEFT JOIN `modx_site_content` `Parent` ON `Parent`.`id` = `resources`.`parent`";

            $query .= " WHERE  `resources`.`class_key` = 'msProduct'
                    AND `resources`.`published` = 1
                    AND `resources`.`deleted` = 0
                    AND `resources`.`context_key` = '" . $modx->context->key . "'
                    AND ($where)
              GROUP BY resources.id
              ORDER BY CAST(`TVpriority1`.`value` AS DECIMAL(13,3)) ASC, CAST(`TVhitspage`.`value` AS DECIMAL(13,3)) ASC";

            $query .= " LIMIT " . self::LIMIT_CATEGORIES;

            // exit($query);
            $data = $this->runQueryAndFetchData($query, $queryWordsArray);

            if (!empty($data)) {
                return $data;
            } else {
                return [];
            }
        }

        /**
         * Выборка СЕО выборок 
         * 
         * @param $wherePagetitle
         * @param $queryWordsArray
         * @return Array
         */
        private function findSeo($wherePagetitle, $queryWordsArray)
        {
            global $modx;

            $query = "SELECT
                `resources`.`id`,
                `resources`.`menutitle`,
                `resources`.`pagetitle`
            FROM
                `modx_site_content` AS `resources`
            WHERE
                `resources`.`class_key` = 'msCategory' AND `resources`.`published` = 1 AND `resources`.`deleted` = 0 AND `resources`.`context_key` = '" . $modx->context->key . "' AND `resources`.`template` IN(" . self::SEO_TEMPLATES . ") AND($wherePagetitle)
            GROUP BY
            resources.id
            LIMIT " . self::LIMIT_CATEGORIES;

            // Удаляем последний аргумент из $queryWordsArray, потому что он не используется, но из-за его наличия будет ошибка
            array_pop($queryWordsArray);
            $data = $this->runQueryAndFetchData($query, $queryWordsArray);

            if (!empty($data)) {
                return $data;
            }

            return false;
        }

        /**
         * Выборка категорий.
         * @param $whereCategories
         * @param $queryWordsArray
         * @return Array
         */
        private function findCategories($whereCategories, $queryWordsArray)
        {
            global $modx;

            $query = "SELECT `resources`.`id`, `resources`.`menutitle`, `resources`.`pagetitle`
                  FROM `modx_site_content` AS `resources` 
                  WHERE  `resources`.`class_key` = 'msCategory' 
                        AND `resources`.`published` = 1 
                        AND `resources`.`deleted` = 0 
                        AND `resources`.`context_key` = '" . $modx->context->key . "'
                        AND ($whereCategories)  
                  GROUP BY resources.id 
                  ORDER BY id
                  LIMIT " . self::LIMIT_CATEGORIES;

            // Удаляем последний аргумент из $queryWordsArray, потому что он не используется, но из-за его наличия будет ошибка
            array_pop($queryWordsArray);
            $data = $this->runQueryAndFetchData($query, $queryWordsArray);

            if (!empty($data)) {
                return $data;
            } else {
                return [];
            }
        }


        /**
         * Запустить SQL-запрос и получить данные.
         * @param $query
         * @param $queryWordsArray
         * @return array|false
         */
        private function runQueryAndFetchData($query, $queryWordsArray)
        {
            global $modx;

            // Запускаем запрос
            $stmt = $modx->prepare($query);
            $queryResult = $stmt->execute($queryWordsArray);
            // В запросе произошла ошибка?
            if ($queryResult === false) {
                //$error = $stmt->errorInfo();
                return false;
            }
            // Получаем и обрабатываем данные
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        }

        /**
         * Транслитеризация строки $string по ключу $key.
         * @param $string
         * @param $key
         * @return string
         */
        protected function translit($string, $key)
        {
            $translit = [
                'ru_en' => [
                    'а' => 'a',
                    'б' => 'b',
                    'в' => 'v',
                    'г' => 'g',
                    'д' => 'd',
                    'е' => 'e',
                    'ё' => 'yo',
                    'ж' => 'zh',
                    'з' => 'z',
                    'и' => 'i',
                    'й' => 'j',
                    'к' => 'k',
                    'л' => 'l',
                    'м' => 'm',
                    'н' => 'n',
                    'о' => 'o',
                    'п' => 'p',
                    'р' => 'r',
                    'с' => 's',
                    'т' => 't',
                    'у' => 'u',
                    'ф' => 'f',
                    'х' => 'h',
                    'ц' => 'c',
                    'ч' => 'ch',
                    'ш' => 'sh',
                    'щ' => 'sh',
                    'ъ' => '``',
                    'ы' => 'y',
                    'ь' => '`',
                    'э' => 'e`',
                    'ю' => 'yu',
                    'я' => 'ya',
                ],

                'en_ru' => [
                    'a' => 'а',
                    'b' => 'б',
                    'v' => 'в',
                    'g' => 'г',
                    'd' => 'д',
                    'e' => 'е',
                    'yo' => 'ё',
                    'zh' => 'ж',
                    'z' => 'з',
                    'i' => 'и',
                    'j' => 'й',
                    'k' => 'к',
                    'l' => 'л',
                    'm' => 'м',
                    'n' => 'н',
                    'o' => 'о',
                    'p' => 'п',
                    'r' => 'р',
                    's' => 'с',
                    't' => 'т',
                    'u' => 'у',
                    'f' => 'ф',
                    'h' => 'х',
                    'c' => 'ц',
                    'ch' => 'ч',
                    'sh' => 'ш',
                    'sch' => 'щ',
                    '``' => 'ъ',
                    'y' => 'ы',
                    '`' => 'ь',
                    'e`' => 'э',
                    'yu' => 'ю',
                    'ya' => 'я',
                ]
            ];

            return strtr(mb_strtolower($string), $translit[$key]);
        }
    }
}

// Подключаем pdoTools. Он нужен для работы сниппета
if (empty($modx->services['pdoTools'])) {
    $modx->getService('pdoTools');
}
// Если не удалось подключить pdoTools, то завершаем работу
if (empty($modx->services['pdoTools'])) {
    $modx->log(MODX_LOG_LEVEL_ERROR, 'Couldn`t get pdoTools');
    return false;
}

$MLTSearch = new MLTSearch($tplProduct, $tplCategory, $tplWrapper, $data['query']);
return $MLTSearch->run();
